<?php
require_once 'BaseController.php';
require_once __DIR__ . '/../Models/OrderModel.php';
require_once __DIR__ . '/../Models/CartModel.php';
require_once __DIR__ . '/../Models/ProductModel.php';
require_once __DIR__ . '/../Models/UserModel.php';

class OrderController extends BaseController
{
    /**
     * Chi ti·∫øt ƒë∆°n h√†ng (xem l·∫°i)
     */
    public function detail($id)
    {
        global $title;
        $title = "Chi ti·∫øt ƒë∆°n h√†ng | Blossy";

        $orderModel = new OrderModel();
        $order = $orderModel->getOrderById($id);

        if (!$order) {
            echo "<script>alert('‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!'); window.location.href='" . BASE_URL . "index.php?controller=auth&action=Info';</script>";
            exit;
        }

        $orderItems = $orderModel->getOrderItems($id);
        $data = [
            'order' => $order,
            'items' => $orderItems
        ];

        $this->loadView('Order.OrderComplete', $data);
    }

    /**
     * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m "Thanh To√°n"
     */
    public function complete()
    {
        global $title;
        $title = "ƒê·∫∑t h√†ng th√†nh c√¥ng | Blossy";
        header('Content-Type: application/json; charset=utf-8');

        // ‚úÖ Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if (!isset($_SESSION['user']['user_id'])) {
            echo json_encode(['success' => false, 'message' => 'Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi thanh to√°n.']);
            exit;
        }

        $userId = $_SESSION['user']['user_id'];
        $cartModel = new CartModel();
        $productModel = new ProductModel();
        $orderModel = new OrderModel();

        // ‚úÖ L·∫•y gi·ªè h√†ng t·ª´ DB
        $cartItems = $cartModel->getCartItemsByUser($userId);

        // üîÅ N·∫øu DB tr·ªëng ‚Üí l·∫•y t·ª´ session
        if (empty($cartItems) && !empty($_SESSION['cart'])) {
            $cartItems = array_map(function ($item) {
                return [
                    'product_id' => $item['id'] ?? $item['product_id'],
                    'name'       => $item['name'],
                    'price'      => $item['price'],
                    'quantity'   => $item['quantity'],
                    'image_url'  => $item['image_url'] ?? '',
                    'stock'      => $item['stock'] ?? 1
                ];
            }, $_SESSION['cart']);
        }

        // ‚úÖ N·∫øu v·∫´n tr·ªëng th√¨ b√°o l·ªói
        if (empty($cartItems)) {
            echo json_encode(['success' => false, 'message' => 'Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ thanh to√°n!']);
            exit;
        }

        // ‚úÖ Ki·ªÉm tra s·∫£n ph·∫©m h·ª£p l·ªá + t·ªìn kho
        foreach ($cartItems as $item) {
            $pid = $item['product_id'] ?? 0;
            $product = $productModel->getById($pid);

            if (!$product || !$product['is_active']) {
                echo json_encode(['success' => false, 'message' => 'S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã x√≥a.']);
                exit;
            }

            if (($product['stock'] ?? 0) < $item['quantity']) {
                echo json_encode(['success' => false, 'message' => 'S·∫£n ph·∫©m "' . $product['name'] . '" kh√¥ng ƒë·ªß h√†ng.']);
                exit;
            }
        }

        // ‚úÖ T√≠nh t·ªïng ti·ªÅn
        $subtotal = 0;
        foreach ($cartItems as $item) {
            $subtotal += $item['price'] * $item['quantity'];
        }

        $discount = 0;
        $shipping = 30000; // t·∫°m ph√≠ ship c·ªë ƒë·ªãnh
        $total = $subtotal - $discount + $shipping;

        // ‚úÖ T·∫°o ƒë∆°n h√†ng m·ªõi
        $orderId = $orderModel->createOrder([
            'user_id' => $userId,
            'address_id' => 1,
            'status' => 'cho_xac_nhan',
            'payment_method' => $_POST['payment_method'] ?? 'cod',
            'payment_status' => 'chua_thanh_toan',
            'subtotal' => $subtotal,
            'discount_total' => $discount,
            'shipping_fee' => $shipping,
            'grand_total' => $total,
            'voucher_code' => $_POST['voucher'] ?? null,
            'note' => 'Giao h√†ng t·∫≠n n∆°i'
        ]);

        // ‚úÖ L∆∞u chi ti·∫øt s·∫£n ph·∫©m v√†o order_items
        foreach ($cartItems as $product) {
            $orderModel->addOrderItem($orderId, $product);
        }

        // ‚úÖ Gi·∫£m t·ªìn kho s·∫£n ph·∫©m
        foreach ($cartItems as $item) {
            $productModel->reduceStock($item['product_id'], $item['quantity']);
        }

        // ‚úÖ X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t
        $cartModel->clearCart($userId);
        unset($_SESSION['cart']);

        // ‚úÖ L∆∞u session hi·ªÉn th·ªã trang "Order Completed"
        $_SESSION['last_order'] = [
            'order' => [
                'code' => 'OD' . str_pad($orderId, 5, '0', STR_PAD_LEFT),
                'payment' => strtoupper($_POST['payment_method'] ?? 'COD'),
                'total' => number_format($total, 0, ',', '.') . 'ƒë',
                'status' => 'Ch·ªù x√°c nh·∫≠n',
                'delivery_date' => date('d/m/Y', strtotime('+3 days'))
            ],
            'items' => $cartItems
        ];

        echo json_encode([
            'success' => true,
            'redirect' => 'index.php?controller=order&action=showCompleted'
        ]);
        exit;
    }

    /**
     * Hi·ªÉn th·ªã trang ho√†n t·∫•t ƒë∆°n h√†ng
     */
    public function showCompleted()
    {
        global $title;
        $title = "ƒê·∫∑t h√†ng th√†nh c√¥ng | Blossy";

        if (isset($_SESSION['last_order'])) {
            $order = $_SESSION['last_order']['order'];
            $items = $_SESSION['last_order']['items'];

            $this->loadView('Order.OrderCompleted', [
                'order' => $order,
                'items' => $items
            ]);
        } else {
          
            exit;
        }
    }

    /** X√≥a session ƒë∆°n h√†ng */
    public function clearSession()
    {
        unset($_SESSION['last_order']);
        echo json_encode(['success' => true]);
        exit;
    }
}
