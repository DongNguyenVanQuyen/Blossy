<?php
require_once 'BaseController.php';
require_once __DIR__ . '/../Models/OrderModel.php';
require_once __DIR__ . '/../Models/CartModel.php';
require_once __DIR__ . '/../Models/ProductModel.php';
require_once __DIR__ . '/../Models/UserModel.php';

class OrderController extends BaseController
{
    /**
     * Xem chi ti·∫øt ƒë∆°n h√†ng
     */
public function detail($id)
{
    global $title;
    $title = "Chi ti·∫øt ƒë∆°n h√†ng | Blossy";

    $orderModel = new OrderModel();
    $order = $orderModel->getOrderById($id);

    if (!$order) {
        echo "<script>alert('‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!'); window.location.href='" . BASE_URL . "index.php?controller=auth&action=info';</script>";
        exit;
    }

    // ‚úÖ T·∫°o m√£ ƒë∆°n h√†ng n·∫øu ch∆∞a c√≥
    if (empty($order['code'])) {
        $order['code'] = 'OD' . str_pad($order['id'], 5, '0', STR_PAD_LEFT);
    }

    // ‚úÖ T·ªïng ti·ªÅn, ph∆∞∆°ng th·ª©c, ng√†y giao
    $order['total'] = number_format($order['grand_total'] ?? 0, 0, ',', '.') . 'ƒë';
    $order['payment'] = strtoupper($order['payment_method'] ?? 'COD');
    $order['delivery_date'] = !empty($order['delivery_date'])
        ? date('d/m/Y', strtotime($order['delivery_date']))
        : date('d/m/Y', strtotime(($order['created_at'] ?? 'now') . ' +3 days'));

    // ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m
    $orderItems = $orderModel->getOrderItems($id);

    // ‚úÖ X·ª≠ l√Ω gi√° c≈© / m·ªõi
    foreach ($orderItems as &$item) {
        $price = $item['price'] ?? $item['unit_price'] ?? 0;
        $discount = $item['discount'] ?? 0;
        $old = $item['compare_at_price'] ?? $item['old_price'] ?? $price;
        $quantity = $item['quantity'] ?? 1;

        // N·∫øu ƒë∆°n h√†ng c√≥ gi·∫£m gi√° t·ªïng m√† item ch∆∞a c√≥ discount
        if ($discount == 0 && !empty($order['discount_total']) && !empty($order['subtotal']) && $order['subtotal'] > 0) {
            $share = ($price * $quantity) / $order['subtotal'];
            $discount = round($order['discount_total'] * $share, 0);
        }

        $item['new_price'] = max(0, $price - ($discount / $quantity));
        $item['old_price'] = $old;
    }
    unset($item); // tr√°nh tham chi·∫øu sau foreach

    // ‚úÖ Truy·ªÅn d·ªØ li·ªáu sang view
    $data = [
        'order' => $order,
        'items' => $orderItems
    ];

    $this->loadView('Order.OrderCompleted', $data);
}


    /**
     * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m "Thanh To√°n"
     */
    public function complete()
    {
        global $title;
        $title = "ƒê·∫∑t h√†ng th√†nh c√¥ng | Blossy";
        header('Content-Type: application/json; charset=utf-8');

        if (!isset($_SESSION['user']['user_id'])) {
            echo json_encode(['success' => false, 'message' => 'Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi thanh to√°n.']);
            exit;
        }

        $userId = $_SESSION['user']['user_id'];
        $cartModel = new CartModel();
        $productModel = new ProductModel();
        $orderModel = new OrderModel();

        // ‚úÖ ∆Øu ti√™n session Mua Ngay
        if (!empty($_SESSION['buy_now'])) {
            $cartItems = $_SESSION['buy_now'];
        } else {
            $cartItems = $cartModel->getCartItemsByUser($userId);

            if (empty($cartItems) && !empty($_SESSION['cart'])) {
                $cartItems = array_map(function ($item) {
                    return [
                        'product_id' => $item['id'] ?? $item['product_id'],
                        'name'       => $item['name'],
                        'price'      => $item['price'],
                        'quantity'   => $item['quantity'],
                        'image_url'  => $item['image_url'] ?? '',
                        'stock'      => $item['stock'] ?? 1
                    ];
                }, $_SESSION['cart']);
            }
        }

        if (empty($cartItems)) {
            echo json_encode(['success' => false, 'message' => 'Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ thanh to√°n!']);
            exit;
        }

        // ‚úÖ Ki·ªÉm tra s·∫£n ph·∫©m h·ª£p l·ªá + t·ªìn kho
        foreach ($cartItems as $item) {
            $pid = $item['product_id'] ?? 0;
            $product = $productModel->getById($pid);

            if (!$product || !$product['is_active']) {
                echo json_encode(['success' => false, 'message' => 'S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã x√≥a.']);
                exit;
            }

            if (($product['stock'] ?? 0) < $item['quantity']) {
                echo json_encode(['success' => false, 'message' => 'S·∫£n ph·∫©m "' . $product['name'] . '" kh√¥ng ƒë·ªß h√†ng.']);
                exit;
            }
        }

        // ‚úÖ T√≠nh t·ªïng ti·ªÅn
        $subtotal = 0;
        foreach ($cartItems as $item) {
            $subtotal += $item['price'] * $item['quantity'];
        }

        // ‚úÖ Gi·ªØ voucher (ng∆∞·ªùi d√πng nh·∫≠p)
        $discount = (float)($_POST['voucher_discount'] ?? 0);
        $voucherCode = $_POST['voucher_code'] ?? null;

        $shipping = 30000;
        $total = max(0, $subtotal - $discount + $shipping);

        // üîπ Chia ƒë·ªÅu ph·∫ßn gi·∫£m gi√° cho t·ª´ng s·∫£n ph·∫©m (t·ª∑ l·ªá theo gi√°)
        if ($discount > 0 && $subtotal > 0) {
            foreach ($cartItems as &$item) {
                $share = ($item['price'] * $item['quantity']) / $subtotal;
                $item['discount'] = round($discount * $share, 0);
                $item['new_price'] = max(0, $item['price'] - ($item['discount'] / $item['quantity']));
            }
        }

        $paymentMethod = $_POST['payment_method'] ?? 'cod';
        $paymentStatus = ($paymentMethod !== 'cod') ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n';
        $deliveryDate = date('Y-m-d', strtotime('+3 days'));

        // ‚úÖ T·∫°o ƒë∆°n h√†ng
        $orderId = $orderModel->createOrder([
            'user_id' => $userId,
            'address_id' => 1,
            'status' => 'cho_xac_nhan',
            'payment_method' => $paymentMethod,
            'payment_status' => $paymentStatus,
            'subtotal' => $subtotal,
            'discount_total' => $discount,
            'shipping_fee' => $shipping,
            'grand_total' => $total,
            'voucher_code' => $voucherCode,
            'note' => 'Giao h√†ng t·∫≠n n∆°i',
            'delivery_date' => $deliveryDate
        ]);

        // ‚úÖ Ghi nh·∫≠n voucher usage n·∫øu c√≥ m√£
        if (!empty($voucherCode)) {
            require_once __DIR__ . '/../Models/VoucherModel.php';
            $voucherModel = new VoucherModel();
            $voucher = $voucherModel->getActiveVoucher($voucherCode);

            if ($voucher) {
                $voucherModel->recordUsage($voucher['id'], $userId, $orderId);
            }
        }

        // ‚úÖ L∆∞u chi ti·∫øt s·∫£n ph·∫©m v√†o order_items
        foreach ($cartItems as $product) {
            $orderModel->addOrderItem($orderId, $product);
        }

        // ‚úÖ Gi·∫£m t·ªìn kho s·∫£n ph·∫©m
        foreach ($cartItems as $item) {
            $productModel->reduceStock($item['product_id'], $item['quantity']);
        }

        // ‚úÖ X√≥a gi·ªè h√†ng
        $cartModel->clearCart($userId);
        unset($_SESSION['cart'], $_SESSION['buy_now']);

        // ‚úÖ L∆∞u session hi·ªÉn th·ªã trang th√†nh c√¥ng
        $_SESSION['last_order'] = [
            'order' => [
                'code' => 'OD' . str_pad($orderId, 5, '0', STR_PAD_LEFT),
                'payment' => strtoupper($paymentMethod),
                'payment_status' => $paymentStatus,
                'subtotal' => number_format($subtotal, 0, ',', '.') . 'ƒë',
                'discount' => number_format($discount, 0, ',', '.') . 'ƒë',
                'shipping' => number_format($shipping, 0, ',', '.') . 'ƒë',
                'total' => number_format($total, 0, ',', '.') . 'ƒë',
                'voucher' => $voucherCode,
                'status' => 'cho_xac_nhan',
                'delivery_date' => $deliveryDate
            ],
            'items' => $cartItems // üîπ gi·ªù m·ªói item c√≥ discount & new_price
        ];

        echo json_encode([
            'success' => true,
            'redirect' => 'index.php?controller=order&action=showCompleted'
        ]);
        exit;
    }

    public function showCompleted()
    {
        global $title;
        $title = "ƒê·∫∑t h√†ng th√†nh c√¥ng | Blossy";

        if (isset($_SESSION['last_order'])) {
            $order = $_SESSION['last_order']['order'];
            $items = $_SESSION['last_order']['items'];

            $this->loadView('Order.OrderCompleted', [
                'order' => $order,
                'items' => $items
            ]);
        } else {
            echo "<script>window.location.href='index.php?controller=products&action=index';</script>";
            exit;
        }
    }

    public function clearSession()
    {
        unset($_SESSION['last_order']);
        echo json_encode(['success' => true]);
        exit;
    }
}
 