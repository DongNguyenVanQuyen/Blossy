<?php
require_once 'BaseController.php';
require_once __DIR__ . '/../Models/OrderModel.php';
require_once __DIR__ . '/../Models/CartModel.php';
require_once __DIR__ . '/../Models/ProductModel.php';
require_once __DIR__ . '/../Models/UserModel.php';

class OrderController extends BaseController
{
    /**
     * Xem chi ti·∫øt ƒë∆°n h√†ng
        */
    public function detail($id)
    {
        global $title;
        $title = "Chi ti·∫øt ƒë∆°n h√†ng | Blossy";

        $orderModel = new OrderModel();
        $order = $orderModel->getOrderById($id);

        if (!$order) {
            echo "<script>alert('‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!'); window.location.href='" . BASE_URL . "index.php?controller=auth&action=info';</script>";
            exit;
        }

        // ‚úÖ T·∫°o m√£ ƒë∆°n h√†ng n·∫øu ch∆∞a c√≥
        if (empty($order['code'])) {
            $order['code'] = 'OD' . str_pad($order['id'], 5, '0', STR_PAD_LEFT);
        }

        // ‚úÖ G√°n t·ªïng ti·ªÅn (grand_total) ƒë·ªãnh d·∫°ng ƒë·∫πp
        $order['total'] = number_format($order['grand_total'] ?? 0, 0, ',', '.') . 'ƒë';

        // ‚úÖ G√°n ph∆∞∆°ng th·ª©c thanh to√°n vi·∫øt hoa
        $order['payment'] = strtoupper($order['payment_method'] ?? 'COD');

        // ‚úÖ Ng√†y giao d·ª± ki·∫øn (3 ng√†y sau)
        $order['delivery_date'] = date('d/m/Y', strtotime('+3 days'));

        $orderItems = $orderModel->getOrderItems($id);

        $data = [
            'order' => $order,
            'items' => $orderItems
        ];

        $this->loadView('Order.OrderCompleted', $data);
    }
    /**
     * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m "Thanh To√°n"
     */
    public function complete()
    {
        global $title;
        $title = "ƒê·∫∑t h√†ng th√†nh c√¥ng | Blossy";
        header('Content-Type: application/json; charset=utf-8');

        // ‚úÖ Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if (!isset($_SESSION['user']['user_id'])) {
            echo json_encode(['success' => false, 'message' => 'Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi thanh to√°n.']);
            exit;
        }

        $userId = $_SESSION['user']['user_id'];
        $cartModel = new CartModel();
        $productModel = new ProductModel();
        $orderModel = new OrderModel();

        // ‚úÖ ∆Øu ti√™n session Mua Ngay
        if (!empty($_SESSION['buy_now'])) {
            $cartItems = $_SESSION['buy_now'];
        } else {
            // N·∫øu kh√¥ng c√≥ ‚Üí l·∫•y t·ª´ DB
            $cartItems = $cartModel->getCartItemsByUser($userId);

            // üîÅ N·∫øu DB tr·ªëng ‚Üí fallback session cart
            if (empty($cartItems) && !empty($_SESSION['cart'])) {
                $cartItems = array_map(function ($item) {
                    return [
                        'product_id' => $item['id'] ?? $item['product_id'],
                        'name'       => $item['name'],
                        'price'      => $item['price'],
                        'quantity'   => $item['quantity'],
                        'image_url'  => $item['image_url'] ?? '',
                        'stock'      => $item['stock'] ?? 1
                    ];
                }, $_SESSION['cart']);
            }
        }


        // ‚úÖ N·∫øu v·∫´n tr·ªëng th√¨ b√°o l·ªói
        if (empty($cartItems)) {
            echo json_encode(['success' => false, 'message' => 'Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ thanh to√°n!']);
            exit;
        }

        // ‚úÖ Ki·ªÉm tra s·∫£n ph·∫©m h·ª£p l·ªá + t·ªìn kho
        foreach ($cartItems as $item) {
            $pid = $item['product_id'] ?? 0;
            $product = $productModel->getById($pid);

            if (!$product || !$product['is_active']) {
                echo json_encode(['success' => false, 'message' => 'S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã x√≥a.']);
                exit;
            }

            if (($product['stock'] ?? 0) < $item['quantity']) {
                echo json_encode(['success' => false, 'message' => 'S·∫£n ph·∫©m "' . $product['name'] . '" kh√¥ng ƒë·ªß h√†ng.']);
                exit;
            }
        }

        // ‚úÖ T√≠nh t·ªïng ti·ªÅn
        $subtotal = 0;
        foreach ($cartItems as $item) {
            $subtotal += $item['price'] * $item['quantity'];
        }

        // ‚úÖ L·∫•y th√¥ng tin gi·∫£m gi√° v√† voucher t·ª´ form
        $discount = (float)($_POST['voucher_discount'] ?? 0);
        $voucherCode = $_POST['voucher_code'] ?? null;

        $shipping = 30000;
        $total = max(0, $subtotal - $discount + $shipping);

        // ‚úÖ Ph√¢n b·ªï gi·∫£m gi√° cho t·ª´ng s·∫£n ph·∫©m (ƒë·ªÉ hi·ªÉn th·ªã)
        if ($discount > 0 && $subtotal > 0) {
            $remainingDiscount = $discount;
            $count = count($cartItems);

            foreach ($cartItems as $index => &$item) {
                $lineTotal = $item['price'] * $item['quantity'];

                if ($index < $count - 1) {
                    $itemDiscount = round($discount * ($lineTotal / $subtotal));
                    $remainingDiscount -= $itemDiscount;
                } else {
                    // s·∫£n ph·∫©m cu·ªëi nh·∫≠n ph·∫ßn c√≤n l·∫°i
                    $itemDiscount = max(0, $remainingDiscount);
                }

                $item['discount'] = $itemDiscount;
                $item['price_after'] = round(max(0, ($lineTotal - $itemDiscount) / $item['quantity']));
            }
        }
        $paymentMethod = $_POST['payment_method'] ?? 'cod';
        $paymentStatus = ($paymentMethod !== 'cod') ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n';

        // ‚úÖ T·∫°o ƒë∆°n h√†ng m·ªõi
        $orderId = $orderModel->createOrder([
            'user_id' => $userId,
            'address_id' => 1,
            'status' => 'cho_xac_nhan',
            'payment_method' => $paymentMethod,
            'payment_status' => $paymentStatus,
            'subtotal' => $subtotal,
            'discount_total' => $discount,
            'shipping_fee' => $shipping,
            'grand_total' => $total,
            'voucher_code' => $voucherCode,
            'note' => 'Giao h√†ng t·∫≠n n∆°i',
            'delivery_date' => date('Y-m-d', strtotime('+3 days'))
        ]);



        // ‚úÖ L∆∞u chi ti·∫øt s·∫£n ph·∫©m v√†o order_items
        foreach ($cartItems as $product) {
            $orderModel->addOrderItem($orderId, $product);
        }

        // ‚úÖ Gi·∫£m t·ªìn kho s·∫£n ph·∫©m
        foreach ($cartItems as $item) {
            $productModel->reduceStock($item['product_id'], $item['quantity']);
        }

        // ‚úÖ X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t
        $cartModel->clearCart($userId);
        unset($_SESSION['cart']);
        unset($_SESSION['buy_now']); 

        // ‚úÖ L∆∞u session ƒë·ªÉ hi·ªÉn th·ªã trang Order Completed
        $_SESSION['last_order'] = [
            'order' => [
                'code' => 'OD' . str_pad($orderId, 5, '0', STR_PAD_LEFT),
                'payment' => strtoupper($_POST['payment_method'] ?? 'COD'),
                'subtotal' => number_format($subtotal, 0, ',', '.') . 'ƒë',
                'discount' => number_format($discount, 0, ',', '.') . 'ƒë',
                'shipping' => number_format($shipping, 0, ',', '.') . 'ƒë',
                'total' => number_format($total, 0, ',', '.') . 'ƒë',
                'voucher' => $voucherCode,
                'status' => 'Ch·ªù x√°c nh·∫≠n',
                'delivery_date' => date('d/m/Y', strtotime('+3 days'))
            ],
            'items' => $cartItems
        ];

        echo json_encode([
            'success' => true,
            'redirect' => 'index.php?controller=order&action=showCompleted'
        ]);
        exit;
    }

    /**
     * Hi·ªÉn th·ªã trang ho√†n t·∫•t ƒë∆°n h√†ng
     */
    public function showCompleted()
    {
        global $title;
        $title = "ƒê·∫∑t h√†ng th√†nh c√¥ng | Blossy";

        if (isset($_SESSION['last_order'])) {
            $order = $_SESSION['last_order']['order'];
            $items = $_SESSION['last_order']['items'];

            $this->loadView('Order.OrderCompleted', [
                'order' => $order,
                'items' => $items
            ]);
        } else {
            echo "<script>window.location.href='index.php?controller=products&action=index';</script>";
            exit;
        }
    }

    /** X√≥a session ƒë∆°n h√†ng */
    public function clearSession()
    {
        unset($_SESSION['last_order']);
        echo json_encode(['success' => true]);
        exit;
    }
}
